//Skylar Reese
//cpt 187
//Purpose: The purpose of this program is to allow the user
//		   to input a file to read and order from as well 
//		   as append the file with another entry. THe program will
//		   then print a receipt of all order details and display
//		   a final report containing all records.
//3 December 2019

package edu.cpt187.reese.participation;

public class SodOrder 
{
	private final double ZERO_TOTAL = 0.0;
	private final double TAX_RATE = 0.075;
	private int[] itemCounts;
	private int[] discountCounts;
	private int[] prizeCounts;
	private char discountType = ' ';
	private String itemName = "";
	private double itemPrice = 0.0;
	private String discountName = "";
	private double discountRate = 0.0;
	private int howMany = 0;
	private int lastItemSelectedIndex = 0;
	private String prizeName = "";
	
	public SodOrder()
	{
	}//End of constructor
	
	public void setItemCountArray(int borrowedRecordCount)
	{
		itemCounts = new int[borrowedRecordCount];
	}
	
	public void setItemSelection(int borrowedSearchIndex)
	{
		lastItemSelectedIndex = borrowedSearchIndex;
		
	}//End of item selection
	
	public void setItemName(String[] borrowedItemNames)
	{
		itemName = borrowedItemNames[lastItemSelectedIndex];
		
	}//End of item name
	
	public void setItemPrice(double[] borrowedItemPrices)
	{
		itemPrice = borrowedItemPrices[lastItemSelectedIndex];
		
	}//End of item price
	
	public void setHowMany(int borrowedHowMany)
	{
		howMany = borrowedHowMany;
		
	}//End of how many
	
	public void setDiscountType(char borrowedMenuSelection)
	{
		discountType = borrowedMenuSelection;
		
	}//End of discount type
	
	public void setDiscountName(String[] borrowedDiscountNames)
	{
		discountCounts = new int[borrowedDiscountNames.length];
		if(discountType == 'A')
		{
			discountName = borrowedDiscountNames[0];
			discountCounts[0]++;
		}
		else if(discountType == 'B')
		{
			discountName = borrowedDiscountNames[1];
			discountCounts[1]++;
		}
		else
		{
			discountName = borrowedDiscountNames[2];
			discountCounts[2]++;
		}
		
	}//End of discount name
	
	public void setDiscountRate(double[] borrowedDiscountRates)
	{
		if(discountType == 'A')
		{
			discountRate = borrowedDiscountRates[0];
		}
		else if(discountType == 'B')
		{
			discountRate = borrowedDiscountRates[1];
		}
		else
		{
			discountRate = borrowedDiscountRates[2];
		}
		
	}//End of discount rate
	
	public void setPrizeName(String[] borrowedPrizeNames, int borrowedRandomNumber)
	{
		prizeCounts = new int[borrowedPrizeNames.length];
		prizeName = borrowedPrizeNames[borrowedRandomNumber];
		
		if(prizeName == borrowedPrizeNames[0])
		{
			prizeCounts[0]++;
		}
		else if(prizeName == borrowedPrizeNames[1])
		{
			prizeCounts[1]++;
		}
		else
		{
			prizeCounts[2]++;
		}
	
	}//End of prize name
	
	public void setDecreaseInStock(Inventory borrowedInventoryObject)
	{
		borrowedInventoryObject.setReduceStock(howMany);
		
	}//End of decrease stocks
	
	public int getInStockCount(int[] borrowedInStockCounts)
	{
		return borrowedInStockCounts[lastItemSelectedIndex];
		
	}//End of get stock counts
	
	public int getItemID(int[] borrowedItemID)
	{
		return borrowedItemID[lastItemSelectedIndex];
		
	}//End of get item ID
	
	public String getItemName()
	{
		return itemName;
		
	}//End of get item name
	
	public double getItemPrice()
	{
		return itemPrice;
		
	}//End of get item price
	
	public int[] getItemCounts()
	{
		return itemCounts;
		
	}//End of get item counts
	
	public int getHowMany()
	{
		return howMany;
		
	}//End of get how many
	
	public String getDiscountName()
	{
		return discountName;
		
	}//End of get discount name
	
	public double getDiscountRate()
	{
		return discountRate;
		
	}//End of get discount rate
	
	public int[] getDiscountCounts()
	{
		return discountCounts;
		
	}//End of get discount counts
	
	public double getDiscountAmount()
	{
		return itemPrice * discountRate;
		
	}//End of get discount amount
	
	public double getDiscountPrice()
	{
		return itemPrice - getDiscountAmount();
		
	}//End of get discount price
	
	public String getPrizeName()
	{
		return prizeName;
		
	}//End of get prize name
	
	public int[] getPrizeCounts()
	{
		return prizeCounts;
		
	}//End of get prize counts
	
	public double getSubTotal()
	{
		if(discountRate == ZERO_TOTAL)
		{
			return itemPrice * getHowMany();
		}
		
		return getDiscountPrice() * getHowMany();
		
	}//End of get sub total
	
	public double getTaxRate()
	{
		return TAX_RATE;
		
	}//End of get tax rate
	
	public double getTaxAmount()
	{
		return getSubTotal() * TAX_RATE;
		
	}//End of get tax amount
	
	public double getTotalCost()
	{
		return getSubTotal() - getTaxAmount();
		
	}//End of get total cost
	
	
	
	
	
}//End of SodOrder class
